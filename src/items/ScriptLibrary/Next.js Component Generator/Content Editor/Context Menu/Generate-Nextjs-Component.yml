---
ID: "b358d699-3f57-4482-8849-37c2cfd7e644"
Parent: "45b4941a-bc6b-49da-97a1-1bb79387eddd"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: "/sitecore/system/Modules/PowerShell/Script Library/Next.js Component Generator/Content Editor/Context Menu/Generate-Nextjs-Component"
SharedFields:
- ID: "1c76313e-3c8c-4807-a826-135d10c39299"
  Hint: ShowRule
  Value: |
    <ruleset>
      <rule
        uid="{FCA6823B-2152-42A4-ADE5-101DC0D89844}">
        <conditions>
          <condition
            id="{D0810F9D-734C-452D-BBB6-4730368D68F1}"
            uid="09F8EA427F1B4AE6AAFA7DAA2BE48653"
            templateid="{04646A89-996F-4EE7-878A-FFDBF1F0EF0D}" />
        </conditions>
      </rule>
    </ruleset>
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    $rendering = Get-Item .
    if ($rendering -eq $null) {
        Write-Warning "No context item selected"
        return
    }
    
    $componentName = ($rendering.Fields | Where-Object { $_.Name -eq "componentName" }).value
    if ([string]::IsNullOrEmpty($componentName)) {
        Write-Warning "No component name defined"
        return
    }
    
    $datasourceTemplatePath = $rendering.Fields | Where-Object { $_.Name -eq "Datasource Template" }
    if ([string]::IsNullOrEmpty($datasourceTemplatePath)) {
        Write-Warning "No datasource template defined"
        return
    }
    
    $datasourceTemplate =  Get-Item -Path $datasourceTemplatePath.value
    if ($datasourceTemplate -eq $null) {
        Write-Warning "No datasource template item found"
        return
    }
    
    function Get-Imports {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory = $true, Position = 0)]
            [string]$FieldType
        )
    
        begin {
            Write-Verbose "Cmdlet Get-Imports - Begin"
        }
    
        process {
            Write-Verbose "Cmdlet Get-Imports - Process"
            switch ($FieldType) {
    		    "Image" {@("ImageField", "NextImage"); Break}
    		    
    		    "General Link" {@("LinkField", "Link"); Break}
    		    
    		    "Single-Line Text" {@("Field", "Text"); Break}
    		    "Multi-Line Text" {@("Field", "Text"); Break}
    		    "Rich Text" {@("Field", "RichText"); Break}
    		    "Date" {@("Field", "Text"); Break}
    		    "Datetime" {@("Field", "Text"); Break}
    		    
    		    "Checkbox" {@("Field"); Break}
    		    
    		    "Integer" {@("Field", "Text"); Break}
    		    "Number" {@("Field", "Text"); Break}
    		    
    		    Default {
                    @()
                }
    		}
        }
    
        end {
            Write-Verbose "Cmdlet Get-Imports - End"
        }
    }
    
    function Map-PropType {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory = $true, Position = 0)]
            [string]$FieldType
        )
    
        begin {
            Write-Verbose "Cmdlet Map-PropType - Begin"
        }
    
        process {
            Write-Verbose "Cmdlet Map-PropType - Process"
            switch ($FieldType) {
    		    "Image" {"ImageField"; Break}
    		    
    		    "General Link" {"LinkField"; Break}
    		    
    		    "Single-Line Text" {"Field<string>"; Break}
    		    "Multi-Line Text" {"Field<string>"; Break}
    		    "Rich Text" {"Field<string>"; Break}
    		    "Date" {"Field<string>"; Break}
    		    "Datetime" {"Field<string>"; Break}
    		    
    		    "Checkbox" {"Field<boolean>"; Break}
    		    
    		    "Integer" {"Field<number>"; Break}
    		    "Number" {"Field<number>"; Break}
    		    
    		    Default {
                    $null
                }
    		}
        }
    
        end {
            Write-Verbose "Cmdlet Map-PropType - End"
        }
    }
    
    function Map-FieldRenderer {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory = $true, Position = 2)]
            [string]$FieldName,
            
            [Parameter(Mandatory = $true, Position = 1)]
            [string]$FieldType
        )
    
        begin {
            Write-Verbose "Cmdlet Map-FieldRenderer - Begin"
        }
    
        process {
            Write-Verbose "Cmdlet Map-FieldRenderer - Process"
            $fieldAttribute = "field={props.fields.$($FieldName)}"
            
            switch ($FieldType) {
    		    "Image" {"<NextImage $($fieldAttribute) />"; Break}
    		    
    		    "General Link" {"<Link $($fieldAttribute) />"; Break}
    		    
    		    "Single-Line Text" {"<Text $($fieldAttribute) />"; Break}
    		    "Multi-Line Text" {"<Text $($fieldAttribute) />"; Break}
    		    "Rich Text" {"<RichText $($fieldAttribute) />"; Break}
    		    "Date" {"<Text $($fieldAttribute) />"; Break}
    		    "Datetime" {"<Text $($fieldAttribute) />"; Break}
    		    
    		    "Checkbox" {"{/* No JSS component for the $($FieldName) $($FieldType) field */}"; Break}
    		    
    		    "Integer" {"<Text $($fieldAttribute) />"; Break}
    		    "Number" {"<Text $($fieldAttribute) />"; Break}
    		    
    		    Default {
                    $null
                }
    		}
        }
    
        end {
            Write-Verbose "Cmdlet Map-FieldRenderer - End"
        }
    }
    
    # Get fields without the section items
    $fields = @{}
    $imports = @()
    Get-ChildItem -Item $datasourceTemplate -Recurse | Where-Object { $_.TemplateID -ne "{E269FBB5-3750-427A-9149-7AA950B49301}" } | ForEach-Object {
        $fields.Add(
            $_.Name,
            @{
                PropType = Map-PropType $_.Type
                Renderer = Map-FieldRenderer -FieldName $_.Name -FieldType $_.Type
            }
        )
        $imports += Get-Imports $_.Type
    }
    
    $imports = $imports | Sort-Object | Get-Unique
    
    # Generate component's code
    $componentCode = ""
    
    if ($imports.count -gt 0) {
        $componentCode += "import {`n"
        foreach ($import in $imports) {
            $componentCode += "  $($import),`n"
        }
        $componentCode += "} from '@sitecore-jss/sitecore-jss-nextjs';`n`n"
    }
    
    $componentCode += "type $($componentName)Props = {`n"
    $componentCode += "  fields: {`n"
    foreach ($fieldName in $fields.Keys) {
        $componentCode += "    $($fieldName): $($fields[$fieldName].PropType);`n"
    }
    $componentCode += "  };`n"
    $componentCode += "};`n`n"
    
    $componentCode += "export const Default = (props: $($componentName)Props): JSX.Element => {`n"
    $componentCode += "  return (`n"
    $componentCode += "    <div>`n"
    foreach ($fieldName in $fields.Keys) {
        $componentCode += "      $($fields[$fieldName].Renderer)`n"
    }
    $componentCode += "    </div>`n"
    $componentCode += "  );`n"
    $componentCode += "};`n"
    
    # Display code in a dialog
    $result = Read-Variable -Parameters `
        @{ Name = "componentCode"; Value=$componentCode; Title="\src\components\$($componentName).tsx"; lines=20; Tooltip="You can put multi line text here"; Tab="Component Code"; Placeholder="You see this when text box is empty" } `
        -Description "Copy this code into your Next.js JSS project to get started with the $($componentName) component." `
        -Title "Guppy Hack Crew Next.js Component Generator" -Width 600 -Height 600 -OkButtonName "Close"
- ID: "f62c67b4-28b6-4a6f-91cb-db78cf054f4e"
  Hint: EnableRule
  Value: |
    <ruleset>
      <rule
        uid="{33212DD1-091B-4D8E-956C-22062A0503D9}">
        <conditions>
          <condition
            id="{61C016A2-5210-4F1D-A663-BDA18BE487F6}"
            uid="18115522D75844D4A8E4607749D60054"
            fieldname="componentname"
            operatorid="{F8641C26-EE27-483C-9FEA-35529ECC8541}"
            value=".+" />
        </conditions>
      </rule>
    </ruleset>
Languages:
- Language: en
  Fields:
  - ID: "b5e02ad9-d56f-4c41-a065-a133db87bdeb"
    Hint: __Display name
    Value: Generate Next.js Component
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20240302T021041Z
    - ID: "52807595-0f8f-4b20-8d2a-cb71d28c6103"
      Hint: __Owner
      Value: |
        sitecore\jflheureux@getfishtank.ca
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\jflheureux@getfishtank.ca
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "bf441821-1b77-4ec9-8d8d-885bf832bac4"
    - ID: "badd9cf9-53e0-4d0c-bcc0-2d784c282f6a"
      Hint: __Updated by
      Value: |
        sitecore\jflheureux@getfishtank.ca
    - ID: "d9cf14b1-fa16-4ba6-9288-e8a174d4d522"
      Hint: __Updated
      Value: 20240302T064037Z
